<?xml version="1.0" encoding="utf-8"?>
<block:b-page
    xmlns:block="http://xslc.org/XBEM/Block"
    xmlns:elem="http://xslc.org/XBEM/Element"
    xmlns:mod="http://xslc.org/XBEM/Modifier">

    <elem:title>jQuery BEM</elem:title>
    <elem:content>
        <block:b-header>
            <elem:github href="https://github.com/hoho/jquery-bem" />
            <elem:title>jQuery BEM</elem:title>
        </block:b-header>

        <block:b-section>
            <elem:title>What is BEM?</elem:title>
            <elem:content>
                <block:b-paragraph>
In short, Block-Element-Modifier (BEM) is a way to split project's markup,
styles, scripts and images into small independent logical pieces. This helps to
maintain, refactor and reuse these pieces in the long run.
                </block:b-paragraph>

                <block:b-paragraph>
Read more at
<block:b-link href="http://bem.info/">BEM's site</block:b-link>.
                </block:b-paragraph>

                <block:b-paragraph>
<block:b-link href="https://github.com/hoho/jquery-bem">jQuery BEM</block:b-link>
plugin is an alternative implementation of just client-side BEM runtime.
                </block:b-paragraph>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title>Documentation Contents</elem:title>
            <elem:content>
                <block:b-contents>
                    <elem:item href="#principles">Basic Principles</elem:item>
                    <elem:item href="#find">Finding Blocks and Elements</elem:item>
                    <elem:item href="#actions">Setting Modifiers and Calling Methods</elem:item>
                    <elem:item href="#decl">JavaScript Declaration</elem:item>
                    <elem:item href="#build">Builders</elem:item>
                    <elem:item href="#setup">Setup</elem:item>
                    <elem:item href="#example">Example</elem:item>
                </block:b-contents>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="principles">Basic Principles</elem:title>
            <elem:content>
                <block:b-paragraph>
First of all, jQuery BEM plugin requires using a certain naming convention.
jQuery BEM locates blocks and elements by analyzing class names of page's DOM
nodes. So, correct class names are the key to success.
                </block:b-paragraph>

                <block:b-list>
                    <elem:item>
                        Block names should start with
                        <block:b-code>b-</block:b-code> or
                        <block:b-code>l-</block:b-code>.
                    </elem:item>
                    <elem:item>
                        Block's, element's and modifier's name and modifier's
                        value could only contain English letters, numbers and
                        minus sign (<block:b-code>[a-zA-Z0-9-]+</block:b-code>).
                    </elem:item>
                    <elem:item>
                        Element's class name is block's name plus double
                        underscore sign plus element's name
                        (<block:b-code>b-block__elem</block:b-code>).
                    </elem:item>
                    <elem:item>
                        Block's modifier looks like block's name plus
                        underscore sign plus modifier's name plus underscore
                        sign plus modifier's value
                        (<block:b-code>b-block_mod_val</block:b-code>).
                    </elem:item>
                    <elem:item>
                        Element's modifier looks like element's class name plus
                        underscore sign plus modifier's name plus underscore
                        sign plus modifier's value
                        (<block:b-code>b-block__elem_mod_val</block:b-code>).
                    </elem:item>
                    <elem:item>
Below is a block named <block:b-code>b-test</block:b-code>. This block has one
modifier named <block:b-code>type</block:b-code> with
<block:b-code>yo</block:b-code> value. There are two elements. First element is
named <block:b-code>elem1</block:b-code>. Second element is named
<block:b-code>elem2</block:b-code>. Second element has one modifier named
<block:b-code>mood</block:b-code> with <block:b-code>happy</block:b-code> value.

<block:b-code mod:pre="yes" mod:highlight="xml"><![CDATA[
<div class="b-test b-test_type_yo">
    <span class="b-test__elem1">element1</span>
    <span class="b-test__elem2 b-test__elem2_mood_happy">element2</span>
</div>]]></block:b-code>
                    </elem:item>
                </block:b-list>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="find">Finding Blocks and Elements</elem:title>
            <elem:content>
                <block:b-paragraph>
Finding blocks with jQuery BEM is as easy as finding DOM nodes with jQuery —
just use <block:b-link href="http://api.jquery.com/category/selectors/">CSS
selectors</block:b-link> and
<block:b-link href="http://api.jquery.com/category/traversing/">traversing
functions</block:b-link>.
                </block:b-paragraph>

                <block:b-paragraph>
                    jQuery BEM adds new kinds of selectors to find blocks and
                    elements.
                </block:b-paragraph>

                <block:b-list>
                    <elem:item>
                        <block:b-code>%b-block</block:b-code> selects all
                        blocks with the given name.
                    </elem:item>
                    <elem:item>
                        <block:b-code>%b-block(elem)</block:b-code> selects
                        all elements with the given name of all blocks with the
                        given name.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod}</block:b-code> selects blocks and
                        elements that have the specified modifier.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod=val}</block:b-code>
                        selects blocks and elements that have the specified
                        modifier with a value exactly equal to a certain value.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod|=val}</block:b-code>
                        selects blocks and elements that have the specified
                        modifier with a value either equal to a given string or
                        starting with that string followed by a hyphen (-).
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod*=val}</block:b-code>
                        selects blocks and elements that have the specified
                        modifier with a value containing the a given substring.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod$=val}</block:b-code>
                        selects blocks and elements that have the specified
                        modifier with a value ending exactly with a given
                        string. The comparison is case sensitive.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod!=val}</block:b-code>
                        select blocks and elements that either don't have the
                        specified modifier, or do have the specified modifier
                        but not with a certain value.
                    </elem:item>
                    <elem:item>
                        <block:b-code>{mod^=val}</block:b-code>
                        selects blocks and elements that have the specified
                        modifier with a value beginning exactly with a given
                        string.
                    </elem:item>
                </block:b-list>

                <block:b-paragraph>
                    These selectors could be used among all other jQuery
                    selectors.
                </block:b-paragraph>

                <block:b-code mod:highlight="javascript" mod:pre="yes"><![CDATA[
// Find all blocks named b-test.
$('%b-test');

// Find all blocks named b-test that have the specified modifier.
$('%b-test{cool=yes}');

// Find all elements named elem1 of blocks named b-test that have the specified
// modifier.
$('%b-test(elem1){cool=yes}');

// Just another example.
$('div %b-test span[id="123"] %b-test2[value="yo"]{test=yes}{ok=no}');

// And yet another one.
$('%b-button').closest('%b-form{active=yes}');
                ]]></block:b-code>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="actions">Setting Modifiers and Calling Methods</elem:title>
            <elem:content>
                <block:b-paragraph>
jQuery BEM extends
<block:b-link href="http://api.jquery.com/Types/#jQuery">jQuery
object</block:b-link> with two methods:
<block:b-code>.bemMod()</block:b-code> and
<block:b-code>.bemCall()</block:b-code>.
                </block:b-paragraph>

                <block:b-list>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemMod('mod', 'val')</block:b-code>
— set modifier <block:b-text mod:em="yes">mod</block:b-text> to
<block:b-text mod:em="yes">val</block:b-text> for each block or element from
the set of matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemMod({block: 'b-block', mod: 'mod'}, 'val')</block:b-code>
— set modifier <block:b-text mod:em="yes">mod</block:b-text> to
<block:b-text mod:em="yes">val</block:b-text> for each block with
<block:b-text mod:nowrap="yes" mod:em="yes">b-block</block:b-text> name from
the set of matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemMod({block: 'b-block', elem: 'elem1', mod: 'mod'}, 'val')</block:b-code>
— set modifier <block:b-text mod:em="yes">mod</block:b-text> to
<block:b-text mod:em="yes">val</block:b-text> for each element named
<block:b-text mod:em="yes">elem1</block:b-text> that belong to block named
<block:b-text mod:nowrap="yes" mod:em="yes">b-block</block:b-text> from the set
of matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemCall('meth')</block:b-code>
<br />or<br />
<block:b-code mod:highlight="javascript">.bemCall({call: 'meth'})</block:b-code>
— call method named <block:b-text mod:em="yes">meth</block:b-text> of each
block or element from the set of matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemCall({call: 'meth', block: 'b-block'})</block:b-code>
— call method named <block:b-text mod:em="yes">meth</block:b-text> of each
block named <block:b-text mod:em="yes">b-block</block:b-text> from the set of
matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemCall({call: 'meth', block: 'b-block', elem: 'elem1'})</block:b-code>
— call method named <block:b-text mod:em="yes">meth</block:b-text> of each
element named <block:b-text mod:em="yes">elem1</block:b-text> that belong to
block named <block:b-text mod:nowrap="yes" mod:em="yes">b-block</block:b-text>
from the set of matched DOM elements.
                    </elem:item>
                    <elem:item>
<block:b-code mod:highlight="javascript">.bemMod('mod')</block:b-code>
<br />or<br />
<block:b-code mod:highlight="javascript">.bemMod({block: 'b-block', mod: 'mod'})</block:b-code>
<br />or<br />
<block:b-code mod:highlight="javascript">.bemMod({block: 'b-block', elem: 'elem1', mod: 'mod'})</block:b-code>
— get <block:b-text mod:em="yes">mod</block:b-text> modifier
of the first block or the first block named <block:b-text mod:em="yes">b-block</block:b-text> or
the first element named <block:b-text mod:em="yes">elem1</block:b-text> of the block
named <block:b-text mod:em="yes">b-block</block:b-text> respectively.
                    </elem:item>
                </block:b-list>

                <block:b-paragraph>
                    Here is an example. Let initial DOM looks like below:
                </block:b-paragraph>

                <block:b-code mod:highlight="html" mod:pre="yes"><![CDATA[
...
<body>
    <div class="b-block1">first block</div>
    <div class="b-block2 b-block3">two blocks on the same node</div>
    <div class="b-block4">
        <div class="b-block4__elem1">first element</div>
        <div class="b-block4__elem2">second element</div>
    </div>
</body>
...]]></block:b-code>

                <block:b-paragraph>
                    If we execute JavaScript code below:
                </block:b-paragraph>

                <block:b-code mod:highlight="javascript" mod:pre="yes"><![CDATA[
$('*') // Select all DOM elements.
    .bemMod('mod1', 'val1')
    .bemMod({block: 'b-block2', mod: 'mod2'}, 'val2')
    .bemMod({block: 'b-block4', elem: 'elem2', mod: 'mod3'}, 'val3');
                ]]></block:b-code>

                <block:b-paragraph>
                    The result will be (class names are wrapped for
                    readability):
                </block:b-paragraph>

                <block:b-code mod:highlight="html" mod:pre="yes"><![CDATA[
...
<body>
    <div class="b-block1
                b-block1_mod1_val1">first block</div>
    <div class="b-block2
                b-block2_mod1_val1
                b-block2_mod2_val2
                b-block3
                b-block3_mod1_val1">two blocks on the same node</div>
    <div class="b-block4
                b-block4_mod1_val1">
        <div class="b-block4__elem1
                    b-block4__elem1_mod1_val1">first element</div>
        <div class="b-block4__elem2
                    b-block4__elem2_mod1_val1
                    b-block4__elem2_mod3_val3">second element</div>
    </div>
</body>
...
                ]]></block:b-code>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="decl">JavaScript Declaration</elem:title>
            <elem:content>
                <block:b-paragraph>
There are two kinds of actions jQuery BEM blocks and elements support:
<block:b-text mod:em="yes">modifier change</block:b-text> and
<block:b-text mod:em="yes">method call</block:b-text>. When a modifier is being
changed or a method is being called, jQuery BEM matches declared callbacks
against current document state and creates a list of matched callbacks (sorted
by order of declaration, from the last one to the first) and calls the first
callback from this list.</block:b-paragraph>

                <block:b-paragraph>
<block:b-code mod:highlight="javascript">$.BEM.decl()</block:b-code> and
<block:b-code mod:highlight="javascript">$.BEM.extend()</block:b-code> methods
are used to declare callbacks. The last one is meant to extend base declaration,
all the callbacks passed to
<block:b-code mod:highlight="javascript">$.BEM.extend()</block:b-code> method
will be supplied with
<block:b-code mod:highlight="javascript">$super</block:b-code> as a first
argument.
                </block:b-paragraph>

                <block:b-paragraph>
Inside all the callbacks
<block:b-code mod:highlight="javascript">this</block:b-code> is referred to
current block object. Initially this object has one property and two methods:
<block:b-code mod:highlight="javascript">$</block:b-code> property points to
block's jQuery element.
<block:b-code mod:highlight="javascript">bemMod()</block:b-code> and
<block:b-code mod:highlight="javascript">bemCall()</block:b-code> methods
should be used to set modifiers and call methods. You can assign additional
properties to <block:b-code mod:highlight="javascript">this</block:b-code>
object, these properties will be accessible from all other callbacks of
current block.
                </block:b-paragraph>

                <block:b-paragraph>
Here is a short example:
                </block:b-paragraph>

                <block:b-code mod:highlight="javascript" mod:pre="yes"><![CDATA[
$.BEM.decl('b-block')
    .onMod('test',
        function(mod, val, prev) {
            this['something'] = 987654;
            console.log('base decl: ' + val);
        })
    .onCall('meme',
        function(arg1, arg2) {
            console.log(arg1 + ' ' + arg2 + ' ' + this['something']);
            return 'mimi';
        });

$.BEM.extend('b-block')
    .onMod('test',
        function($super, mod, val, prev) {
            console.log('extend decl: ' + val);
            $super(mod, val, prev);
            this['something'] += 1;
        })
    .onCall('meme',
        function($super, arg1, arg2) {
            return $super(arg1 + 'aaa', arg2 + 'bbb');
        });

// Let's assume we have <div class="b-block"></div> in our document.
var b = $('%b-block');

b.bemMod('test', 'ololo');
> extend decl: ololo
> base decl: ololo

console.log(b.bemCall('meme', 11, 22));
> 11aaa 22bbb 987655
> mimi
                ]]></block:b-code>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="build">Builders</elem:title>
            <elem:content>
                <block:b-paragraph>
Modifier changes and method calls are for already existing blocks. Builders
are a special kind of declaration to build blocks that not yet exist.
                </block:b-paragraph>

                <block:b-paragraph>
Some small example is below:
                </block:b-paragraph>

                <block:b-code mod:highlight="javascript" mod:pre="yes"><![CDATA[
$.BEM.decl('b-block')
    .onBuild(
        function(details) {
            // First argument is a block's metadata.
            // In this case:
            //     {"block": "b-block", "mods": {"mod1": 123, "mod2": "abc"}}
            // jQuery BEM has $.BEM.className() helper to create appropriate
            // class name from this metadata.
            return $('<div class="' + $.BEM.className(details) + '"></div>');
        });

$.BEM.extend('b-block')
    .onBuild(
        function($super, details, arg1, arg2) {
            // Calling base declaration.
            var b = $super(details);
            // Base declaration has returned an empty <div>, put some text in.
            b.text(arg1 + ' ' + arg2);
            // `this` points to whatever `context` property says during
            // $.BEM.build() call. So, append new <div> to <body>.
            this.append(b);
            // You can return values from method calls and from builders.
            return b;
        });

var tmp = $.BEM.build({
    block: 'b-block',
    context: $('body'),
    mods: {mod1: 123, mod2: 'abc'}
}, 'Hello', 'world');

// `tmp` is a jQuery object pointing to <div> element appended into <body>:
// <div class="b-block b-block_mod1_123 b-block_mod2_abc">Hello world</div>
                ]]></block:b-code>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="setup">Setup</elem:title>
            <elem:content>
                <block:b-paragraph>
It is possible to customize block prefixes. To do that, call
<block:b-code mod:highlight="javascript">$.BEM.setup({prefixes: '(?:ololo-)'});</block:b-code>.
In this example we've changed default <block:b-code>b-</block:b-code> and
<block:b-code>l-</block:b-code> prefixes to  <block:b-code>ololo-</block:b-code>
prefix. <block:b-code>$.BEM.setup()</block:b-code> should be called before any
declarations. <block:b-text mod:em="yes">Note that incorrect regular expression
could break everything.</block:b-text>
                </block:b-paragraph>
            </elem:content>
        </block:b-section>

        <block:b-section>
            <elem:title anchor="example">Example</elem:title>
            <elem:content><block:b-paragraph>Pending.</block:b-paragraph></elem:content>
        </block:b-section>

        <block:b-comments mod:js="yes" id="jquery-bem" />
        <block:b-footer />
    </elem:content>

</block:b-page>
